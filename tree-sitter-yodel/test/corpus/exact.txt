======================
exact: untyped trivial
======================

exact {
  let x = true in x
}

---

    (source_file
      (program
        (eexpr
          (elet
            (identifier)
            (eexpr
              (eanf
                (evalue
                  (bool))))
            (eexpr
              (eanf
                (identifier)))))))

======================
exact: typed trivial
======================

exact {
  let x : Bool = true in
  x : Bool
}

---

(source_file
  (program (eexpr
      (elet (identifier) (ety (tyBool))
        (eexpr (eanf (evalue (bool))))
        (eexpr (eann (eexpr (eanf (identifier)))
            (ety (tyBool))))))))
======================
exact: trivial with extra annotation (not sure if types are going to the right places)
======================

exact {
  let x : Bool = true in
  (x : Bool) : Bool
}

---

(source_file (program (eexpr
      (elet (identifier) (ety (tyBool))
        (eexpr (eanf (evalue (bool))))
        (eexpr (eann (eexpr (eexpr
                     (eann (eexpr (eanf (identifier)))
                     (ety (tyBool)))))
               (ety (tyBool))))))))

======================
exact: trivial with extra product annotation
======================

exact {
  let x : Bool = true in
  (x : (Bool, Bool)) : (Bool, Bool, Bool)
}

---

(source_file (program (eexpr
      (elet (identifier) (ety (tyBool))
        (eexpr (eanf (evalue (bool))))
        (eexpr (eann (eexpr (eexpr (eann (eexpr (eanf (identifier)))
                  (ety (tyProd (ety (tyBool)) (ety (tyBool)))))))
            (ety (tyProd (ety (tyBool)) (ety (tyBool)) (ety (tyBool))))))))))
======================
exact: one typed flip
======================


exact {
  let x : Bool = flip (1.0 / 3.0)  in
  (x : Bool) : Bool
}


---

(source_file
  (program
    (eexpr
      (elet
        (identifier)
        (ety
          (tyBool))
        (eexpr
          (eflip
            (eanf
              (eanf
                (eanf
                  (evalue
                    (float)))
                (numeric_op)
                (eanf
                  (evalue
                    (float)))))))
        (eexpr
          (eann
            (eexpr
              (eexpr
                (eann
                  (eexpr
                    (eanf
                      (identifier)))
                  (ety
                    (tyBool)))))
            (ety
              (tyBool))))))))

======================
exact: one untyped flip
======================

exact {
  let x = flip (1/3) in
  x
}

---

(source_file
  (program
    (eexpr
      (elet
        (identifier)
        (eexpr
          (eflip
            (eanf
              (eanf
                (eanf
                  (evalue
                    (int)))
                (numeric_op)
                (eanf
                  (evalue
                    (int)))))))
        (eexpr
          (eanf
            (identifier)))))))

======================
exact: one flip needs inference
======================
exact {
  let x : Bool = flip (1/3) in
  x
}
---

(source_file
  (program
    (eexpr
      (elet
        (identifier)
        (ety
          (tyBool))
        (eexpr
          (eflip
            (eanf
              (eanf
                (eanf
                  (evalue
                    (int)))
                (numeric_op)
                (eanf
                  (evalue
                    (int)))))))
        (eexpr
          (eanf
            (identifier)))))))

======================
exact: two flips untyped
======================

exact {
  let x = flip 0.3333 in
  let y = flip 1/4 in
  x || y
}

---


    (source_file
      (program
        (eexpr
          (elet
            (identifier)
            (eexpr
              (eflip
                (eanf
                  (evalue
                    (float)))))
            (eexpr
              (elet
                (identifier)
                (eexpr
                  (eflip
                    (eanf
                      (eanf
                        (evalue
                          (int)))
                      (numeric_op)
                      (eanf
                        (evalue
                          (int))))))
                (eexpr
                  (eanf
                    (eanf
                      (identifier))
                    (bool_biop)
                    (eanf
                      (identifier))))))))))


===========================
exact: observed two flips
===========================

exact {
  let x = flip 0.3333 in
  let y = flip 1/4 in
  let _ = observe (x || y) in
  x
}

---


    (source_file
      (program
        (eexpr
          (elet
            (identifier)
            (eexpr
              (eflip
                (eanf
                  (evalue
                    (float)))))
            (eexpr
              (elet
                (identifier)
                (eexpr
                  (eflip
                    (eanf
                      (eanf
                        (evalue
                          (int)))
                      (numeric_op)
                      (eanf
                        (evalue
                          (int))))))
                (eexpr
                  (elet
                    (identifier)
                    (eexpr
                      (eobserve
                        (eanf
                          (eanf
                            (eanf
                              (identifier))
                            (bool_biop)
                            (eanf
                              (identifier))))))
                    (eexpr
                      (eanf
                        (identifier)))))))))))

======================
exact(hybrid): observed two flips
======================

exact {
  let x = sample(~bern(1/3)) in
  let y = flip 1/4 in
  let _ = observe (x || y) in
  x
}

---

(source_file
  (program
    (eexpr
      (elet
        (identifier)
        (eexpr
          (esample
            (sexpr
              (ssample
                (sanf
                  (sanfbern
                    (sanf
                      (sanf
                        (svalue
                          (int)))
                        (numeric_op)
                        (sanf
                          (svalue
                            (int))))))))))
        (eexpr
          (elet
            (identifier)
            (eexpr
              (eflip
                (eanf
                  (eanf
                    (evalue
                      (int)))
                  (numeric_op)
                  (eanf
                    (evalue
                      (int))))))
            (eexpr
              (elet
                (identifier)
                (eexpr
                  (eobserve
                    (eanf
                      (eanf
                        (eanf
                          (identifier))
                        (bool_biop)
                        (eanf
                          (identifier))))))
                (eexpr
                  (eanf
                    (identifier)))))))))))


======================
exact: discrete zero is invalid
======================

exact {
  discrete()
}

---

(source_file
  (program
    (eexpr
      (ediscrete
        (eanf
          (MISSING identifier))))))

======================
exact: discrete 1 arg
======================

exact {
  discrete(0.)
}

---

    (source_file
      (program
        (eexpr
          (ediscrete
            (eanf
              (evalue
                (float)))))))

======================
exact: discrete 3 arg
======================

exact {
  discrete (0., 0.2, 1.5)
}

---

    (source_file
      (program
        (eexpr
          (ediscrete
            (eanf
              (evalue
                (float)))
            (eanf
              (evalue
                (float)))
            (eanf
              (evalue
                (float)))))))

======================
exact: bounded iteration
======================

exact {
  iterate(fun, init, k)
}

---


    (source_file
      (program
        (eexpr
          (eiterate
            (identifier)
            (eanf
              (identifier))
            (eanf
              (identifier))))))

==================
exact: diamond network
==================
exact fn diamond (s1:Bool):Bool {
  let route = flip 0.5 in
  let s2 = if route then s1 else false in
  let s3 = if route then false else s1 in
  let drop = flip 0.0001 in
  s2 || (s3 && !drop)
}
exact {
  let net1 = diamond(true) in
  let net2 = diamond(net1) in
  diamond(net2)
}
---------
    (source_file
      (program
        (efun
          (identifier)
          (eargs
            (earg
              (identifier)
              (ety
                (tyBool))))
          (ety
            (tyBool))
          (eexpr
            (elet
              (identifier)
              (eexpr
                (eflip
                  (eanf
                    (evalue
                      (float)))))
              (eexpr
                (elet
                  (identifier)
                  (eexpr
                    (eite
                      (eanf
                        (identifier))
                      (eexpr
                        (eanf
                          (identifier)))
                      (eexpr
                        (eanf
                          (evalue
                            (bool))))))
                  (eexpr
                    (elet
                      (identifier)
                      (eexpr
                        (eite
                          (eanf
                            (identifier))
                          (eexpr
                            (eanf
                              (evalue
                                (bool))))
                          (eexpr
                            (eanf
                              (identifier)))))
                      (eexpr
                        (elet
                          (identifier)
                          (eexpr
                            (eflip
                              (eanf
                                (evalue
                                  (float)))))
                          (eexpr
                            (eanf
                              (eanf
                                (identifier))
                              (bool_biop)
                              (eanf
                                (eanf
                                  (eanf
                                    (identifier))
                                  (bool_biop)
                                  (eanf
                                    (bool_unop)
                                    (eanf
                                      (identifier))))))))))))))))
        (program
          (eexpr
            (elet
              (identifier)
              (eexpr
                (eapp
                  (identifier)
                  (eanf
                    (evalue
                      (bool)))))
              (eexpr
                (elet
                  (identifier)
                  (eexpr
                    (eapp
                      (identifier)
                      (eanf
                        (identifier))))
                  (eexpr
                    (eapp
                      (identifier)
                      (eanf
                        (identifier)))))))))))

==================
exact(hybrid): arrival problem on diamond-network
==================
exact fn diamond (s1:Bool):Bool {
  let route = flip 0.5 in
  let s2 = if route then s1 else false in
  let s3 = if route then false else s1 in
  let drop = flip 0.0001 in
  s2 || (s3 && !drop)
}
exact {
  let p = sample(poisson(0.4)) in
  iterate(diamond, true, p)
}
---------

    (source_file
      (program
        (efun
          (identifier)
          (eargs
            (earg
              (identifier)
              (ety
                (tyBool))))
          (ety
            (tyBool))
          (eexpr
            (elet
              (identifier)
              (eexpr
                (eflip
                  (eanf
                    (evalue
                      (float)))))
              (eexpr
                (elet
                  (identifier)
                  (eexpr
                    (eite
                      (eanf
                        (identifier))
                      (eexpr
                        (eanf
                          (identifier)))
                      (eexpr
                        (eanf
                          (evalue
                            (bool))))))
                  (eexpr
                    (elet
                      (identifier)
                      (eexpr
                        (eite
                          (eanf
                            (identifier))
                          (eexpr
                            (eanf
                              (evalue
                                (bool))))
                          (eexpr
                            (eanf
                              (identifier)))))
                      (eexpr
                        (elet
                          (identifier)
                          (eexpr
                            (eflip
                              (eanf
                                (evalue
                                  (float)))))
                          (eexpr
                            (eanf
                              (eanf
                                (identifier))
                              (bool_biop)
                              (eanf
                                (eanf
                                  (eanf
                                    (identifier))
                                  (bool_biop)
                                  (eanf
                                    (bool_unop)
                                    (eanf
                                      (identifier))))))))))))))))
        (program
          (eexpr
            (elet
              (identifier)
              (eexpr
                (esample
                  (sexpr
                    (sanf
                      (sanfpoisson
                        (sanf
                          (svalue
                            (float))))))))
              (eexpr
                (eiterate
                  (identifier)
                  (eanf
                    (evalue
                      (bool)))
                  (eanf
                    (identifier)))))))))
