======================
exact: untyped trivial
======================

let x = true in x

---

(source_file
  (let_binding
    (identifier)
    (anf (bool))
  (anf (identifier))))

======================
exact: typed trivial
======================

let x : Bool = true in
x : Bool

---

(source_file
  (let_binding
    (identifier) (ty (tBool))
    (anf (bool))
  (ann (anf (identifier)) (ty (tBool)))))

======================
exact: trivial with extra annotation
======================

let x : Bool = true in
(x : Bool) : Bool

---

(source_file
  (let_binding
    (identifier) (ty (tBool))
    (anf (bool))
    (ann (ann (anf (identifier)) (ty (tBool))) (ty (tBool))) ))

======================
exact: trivial with extra product annotation
======================

let x : Bool = true in
(x : (Bool, Bool)) : (Bool, Bool, Bool)

---

(source_file
  (let_binding
    (identifier) (ty (tBool))
    (anf (bool))
    (ann (ann (anf (identifier)) (ty (tProd (ty (tBool)) (ty (tBool))))) (ty (tProd (ty (tBool)) (ty (tBool)) (ty (tBool))))) ))

======================
exact: one typed flip
======================

let x : Bool = flip (1/3) in
(x : Bool) : Bool
---

(source_file
  (let_binding
    (identifier) (ty (tBool)) (flip (float) (float_op) (float))
    (ann (ann (anf (identifier)) (ty (tBool))) (ty (tBool))) ))

======================
exact: one untyped flip
======================

let x = flip (1/3) in
x
---

(source_file
  (let_binding
    (identifier) (flip (float) (float_op) (float))
    (anf (identifier))))


======================
exact: one flip needs inference
======================

let x : Bool = flip (1/3) in
x
---

(source_file
  (let_binding
    (identifier) (ty (tBool))
    (flip (float) (float_op) (float))
  (anf (identifier))
  ))


======================
exact: two flips untyped
======================

let x = flip 0.3333 in
let y = flip 1/4 in
x || y

---

(source_file
  (let_binding (identifier) (flip (float))
   (let_binding (identifier) (flip (float) (float_op) (float))
    (anf (anf (identifier)) (bool_biop) (anf (identifier)))
   )
  )
)


===========================
exact: observed two flips
===========================

let x = flip 0.3333 in
let y = flip 1/4 in
let _ = observe (x || y) in
x

---


(source_file
  (let_binding
    (identifier)
    (flip (float))
  (let_binding
    (identifier)
    (flip (float) (float_op) (float))
  (let_binding
    (identifier)
    (observe (anf (anf (identifier)) (bool_biop) (anf (identifier))))
  (anf (identifier))))))


======================
approx: observed two flips
======================

let x = sample (flip 1/3) in
let y = flip 1/4 in
let _ = observe (x || y) in
x

---

(source_file
  (let_binding
    (identifier)
    (sample (flip (float) (float_op) (float)))
  (let_binding
    (identifier)
    (flip (float) (float_op) (float))
  (let_binding
    (identifier)
    (observe (anf (anf (identifier)) (bool_biop) (anf (identifier))))
  (anf (identifier))))))

======================
discrete zero is invalid
======================
discrete()

---
(source_file
  (discrete (MISSING float)))

======================
discrete 1 arg
======================

discrete(0)

---

(source_file
  (discrete (float)))

======================
discrete 3 arg
======================

discrete(0, 0.2, 1.5)

---

(source_file
  (discrete
    (float)
    (float)
    (float)))
