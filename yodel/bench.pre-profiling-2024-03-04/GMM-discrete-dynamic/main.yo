exact fn network(
  _p00 : Float,
  _p10T : Float,
  _p10F : Float,
  _p01T : Float,
  _p01F : Float,
  _p11tt : Float,
  _p11tf : Float,
  _p11ft : Float,
  _p11ff : Float,
  _o00 : Bool,
  _o10 : Bool,
  _o01 : Bool,
  _o11 : Bool
) -> Bool {
  let f00 = flip _p00 in
  let f10 = if  f00 then flip _p10T else flip _p10F in
  let f01 = if !f00 then flip _p01T else flip _p01F in
  let f11 = if  f01 &&  f10 then flip _p11tt else
            if !f01 &&  f10 then flip _p11tf else
            if  f01 && !f10 then flip _p11ft else
                                 flip _p11ff in
  observe f11 == _o11 in
  true
}

sample fn mixture(
  hip : Float,

  p00  : (Float,Float),
  p10T : (Float,Float),
  p10F : (Float,Float),
  p01T : (Float,Float),
  p01F : (Float,Float),
  p11tt : (Float,Float),
  p11tf : (Float,Float),
  p11ft : (Float,Float),
  p11ff : (Float,Float),

  og : Float,

  o00 : Bool,
  o10 : Bool,
  o01 : Bool,
  o11 : Bool
) -> Bool {
  // hi ~ bern(hip);
  // g1p <- if hi { g1p_hi } else { g1p_lo  };
  // g2p <- if hi { g2p_hi } else { g2p_lo  };
  // g1 ~ normal(g1p, 1.0);
  // g2 ~ normal(g2p, 1.0);
  // g <- g1 + g2;
  if og > 0 {
    exact(network(p00[0], p10T[0], p10F[0], p01T[0], p01F[0], p11tt[0], p11tf[0], p11ft[0], p11ff[0], o00, o10, o01, o11))
  } else {
    exact(network(p00[1], p10T[1], p10F[1], p01T[1], p01F[1], p11tt[1], p11tf[1], p11ft[1], p11ff[1], o00, o10, o01, o11))
  }
}

sample {
  np ~ beta(1.0, 1.0);
  // hi params
  p000  ~ beta(1.0, 1.0);
  p10T0 ~ beta(1.0, 1.0);
  p10F0 ~ beta(1.0, 1.0);
  p01T0 ~ beta(1.0, 1.0);
  p01F0 ~ beta(1.0, 1.0);
  p11tt0 ~ beta(1.0, 1.0);
  p11tf0 ~ beta(1.0, 1.0);
  p11ft0 ~ beta(1.0, 1.0);
  p11tt0 ~ beta(1.0, 1.0);

  // lo params
  p001  ~ beta(1.0, 1.0);
  p10T1 ~ beta(1.0, 1.0);
  p10F1 ~ beta(1.0, 1.0);
  p01T1 ~ beta(1.0, 1.0);
  p01F1 ~ beta(1.0, 1.0);
  p11tt1 ~ beta(1.0, 1.0);
  p11tf1 ~ beta(1.0, 1.0);
  p11ft1 ~ beta(1.0, 1.0);
  p11tt1 ~ beta(1.0, 1.0);

  p00 <- (p000, p001);
  p10T <- (p10T0, p10T1);
  p10F <- (p10F0, p10F1);
  p01T <- (p01T0, p01T1);
  p01F <- (p01F0, p01F1);
  p11tt <- (p11tt0, p11tt1);
  p11tf <- (p11tf0, p11tf1);
  p11ft <- (p11ft0, p11ft1);
  p11tt <- (p11tt0, p11tt1);

  mixture(np, p00, p10T, p10F, p01T, p01F, p11tt, p11tf, p11ft, p11tt, gs1, x00_1, x10_1, x01_1, x11_1);
  mixture(np, p00, p10T, p10F, p01T, p01F, p11tt, p11tf, p11ft, p11tt, gs2, x00_2, x10_2, x01_2, x11_2);
  mixture(np, p00, p10T, p10F, p01T, p01F, p11tt, p11tf, p11ft, p11tt, gs3, x00_3, x10_3, x01_3, x11_3);
  mixture(np, p00, p10T, p10F, p01T, p01F, p11tt, p11tf, p11ft, p11tt, gs4, x00_4, x10_4, x01_4, x11_4);
  mixture(np, p00, p10T, p10F, p01T, p01F, p11tt, p11tf, p11ft, p11tt, gs5, x00_5, x10_5, x01_5, x11_5);

  // (np, p000, p001, p10T0, p10T1, p10F0, p10F1, p01T0, p01T1, p01F0, p01F1, p11tt0, p11tf0, p11ft0, p11tt0, p11tt1, p11tf1, p11ft1, p11tt1)
  (p000, p001, p10T0, p10T1, p10F0, p10F1, p01T0, p01T1, p01F0, p01F1, p11tt0, p11tf0, p11ft0, p11tt0, p11tt1, p11tf1, p11ft1, p11tt1)
}
