def forward(ix) {
  s := categorical(
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0,
          1.0 / 9.0
  );
  if s < ix {
    return s
  } else {
    return s + 1
  }
}

def node(nid) {
  // an infected node will forward two more packets
  p1 := forward(nid);
  p2 := forward(nid);
  return (p1, p2)
}

def network_step(
    n0 : B,
    n1 : B,
    n2 : B,
    n3 : B,
    n4 : B,
    n5 : B,
    n6 : B,
    n7 : B,
    n8 : B,
    n9 : B,
    next : R) {

  // the incoming packet performs the infection
  _n0 := n0 || (next == 0);
  _n1 := n1 || (next == 1);
  _n2 := n2 || (next == 2);
  _n3 := n3 || (next == 3);
  _n4 := n4 || (next == 4);
  _n5 := n5 || (next == 5);
  _n6 := n6 || (next == 6);
  _n7 := n7 || (next == 7);
  _n8 := n8 || (next == 8);
  _n9 := n9 || (next == 9);
  // the infected node sends two outgoing packets
  fwd := node(next);
  _p1 := fwd[0];
  _p2 := fwd[1];
  // and return the new state
  return (_n0, _n1, _n2,
   _n3, _n4, _n5,
   _n6, _n7, _n8,
   _n9,
   _p1, _p2)
}

def as_num(b : B) {
  if (b) { return 1.0 } else { return 0.0 }
}

def main () {
  // first we sample two packets from the starting node 0
  p := node(0);
  p1 := p[0];
  p2 := p[1];
  i0 := true;
  i1 := false;
  i2 := false;
  i3 := false;
  i4 := false;
  i5 := false;
  i6 := false;
  i7 := false;
  i8 := false;
  i9 := false;

  q := [p1, p2];

  num_steps := 2;
  for step in [0..num_steps) {
    nxt := q[0];
    q = q[1 .. q.length];
    state := network_step(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, nxt);
    i0 = state[0];
    i1 = state[1];
    i2 = state[2];
    i3 = state[3];
    i4 = state[4];
    i5 = state[5];
    i6 = state[6];
    i7 = state[7];
    i8 = state[8];
    i9 = state[9];
    q = q~[state[10]];
    q = q~[state[11]];
  };
  n0 := as_num(i0);
  n1 := as_num(i1);
  n2 := as_num(i2);
  n3 := as_num(i3);
  n4 := as_num(i4);
  n5 := as_num(i5);
  n6 := as_num(i6);
  n7 := as_num(i7);
  n8 := as_num(i8);
  n9 := as_num(i9);
  out := (n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9);
  return Expectation(out)
}
