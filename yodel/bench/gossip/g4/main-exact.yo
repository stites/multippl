exact fn forward0() -> Int {
  let s = discrete(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0) in s + 1
}
exact fn forward1() -> Int {
  let s = discrete(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0) in
  if s == 0 then s else s + 1
}
exact fn forward2() -> Int {
  let s = discrete(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0) in
  if s == 0 then s else
  if s == 1 then s else s + 1
}
exact fn forward3() -> Int {
  let s = discrete(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0) in
  if s == 0 then s else
  if s == 1 then s else
  if s == 2 then s else s + 1
}
exact fn network_step(n0 : Bool, n1 : Bool, n2: Bool, n3 : Bool, next : Int) -> (Bool, Bool, Bool, Bool, Int, Int) {
  // the incoming packet performs the infection
  if next == 0 then let p1 = forward0() in let p2 = forward0() in (true,   n1,   n2,   n3, p1, p2) else
  if next == 1 then let p1 = forward1() in let p2 = forward1() in (  n0, true,   n2,   n3, p1, p2) else
  if next == 2 then let p1 = forward2() in let p2 = forward2() in (  n0,   n1, true,   n3, p1, p2) else
                    let p1 = forward3() in let p2 = forward3() in (  n0,   n1,   n2, true, p1, p2)
}

sample fn as_num(b : Bool) -> Float {
  if (b) { 1.0 } else { 0.0 }
}

sample {
  // first we sample two packets from the starting node 0
  p1 <- exact(forward0());
  p2 <- exact(forward0());
  i0 <- true;
  i1 <- false;
  i2 <- false;
  i3 <- false;

  q  <- [];
  q  <- push(q, p1);
  q  <- push(q, p2);
  num_steps <- 3;
  while (num_steps > 0) {
    nxt <- head(q);
    q   <- tail(q);
    state <- exact(network_step(i0, i1, i2, i3, nxt));

    i0 <- state[0];
    i1 <- state[1];
    i2 <- state[2];
    i3 <- state[3];
    q  <- push(q, state[4]);
    q  <- push(q, state[5]);
    num_steps <- num_steps - 1;
    true
  };
  n0 <- as_num(i0);
  n1 <- as_num(i1);
  n2 <- as_num(i2);
  n3 <- as_num(i3);
  out <- (n0 + n1 + n2 + n3);
  out
}
