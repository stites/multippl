// psi ./hybridCD/main.psi
// p(b,np,p000,p10T0,p10F0,p01T0,p01F0,p001,p10T1,p10F1,p01T1,p01F1) = ((-8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p000·p01F0·⅟√π̅+-8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p01F0·p10F0·⅟√π̅+8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p000·p01F0·p10F0·⅟√π̅+8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p01F0·⅟√π̅)·[-2008190155029297/2500000000000000+b≤0]·[-b+2008190155029297/2500000000000000≠0]·e^(-1/2·np²+-4032827698756591918942928314209/12500000000000000000000000000000+2008190155029297/2500000000000000·np)+(-8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p001·p01F1·⅟√π̅+-8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p01F1·p10F1·⅟√π̅+8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p001·p01F1·p10F1·⅟√π̅+8·e^(4032827698756591918942928314209/25000000000000000000000000000000)·p01F1·⅟√π̅)·[-b+2008190155029297/2500000000000000≤0]·e^(-1/2·np²+-4032827698756591918942928314209/12500000000000000000000000000000+2008190155029297/2500000000000000·np))·[-1+p000≤0]·[-1+p001≤0]·[-1+p01F0≤0]·[-1+p01F1≤0]·[-1+p01T0≤0]·[-1+p01T1≤0]·[-1+p10F0≤0]·[-1+p10F1≤0]·[-1+p10T0≤0]·[-1+p10T1≤0]·[-3/2+b≤0]·[-b+1/2≤0]·[-p000≤0]·[-p001≤0]·[-p01F0≤0]·[-p01F1≤0]·[-p01T0≤0]·[-p01T1≤0]·[-p10F0≤0]·[-p10F1≤0]·[-p10T0≤0]·[-p10T1≤0]·⅟e^(1/2·np²)
def network(p00 : ℝ, p01T : ℝ, p01F : ℝ, p10T : ℝ, p10F : ℝ, o00 : 𝔹, o01 : 𝔹, o10 : 𝔹, o11 : 𝔹){
  x00 := flip(p00);                                   observe(x00 == o00);
  x01 := if x00 { flip(p01T) } else { flip(p01F) };   observe(x01 == o01);
  x10 := if x00 { flip(p10T) } else { flip(p10F) };   observe(x10 == o10);
  x11 := x01 || x10;                                  observe(x11 == o11);
  return true;
}

def mixture(
  np : ℝ,
  boundary : ℝ,
  p00  : ℝ x ℝ,
  p10T : ℝ x ℝ,
  p10F : ℝ x ℝ,
  p01T : ℝ x ℝ,
  p01F : ℝ x ℝ,
  n : ℝ,
  o00 : 𝔹,
  o10 : 𝔹,
  o01 : 𝔹,
  o11 : 𝔹
) {
  cobserve(gauss(np, 1), n);
  if (n > boundary || n < (0 - boundary)) {
    network(p00[0], p10T[0], p10F[0], p01T[0], p01F[0], o00, o10, o01, o11)
  } else {
    network(p00[1], p10T[1], p10F[1], p01T[1], p01F[1], o00, o10, o01, o11)
  }
}

def main(){
    b := uniform(0.5, 1.5);
    np := gauss(0.0, 1.0);
    p000  := beta(1.0, 1.0);
    p10T0 := beta(1.0, 1.0);
    p10F0 := beta(1.0, 1.0);
    p01T0 := beta(1.0, 1.0);
    p01F0 := beta(1.0, 1.0);

    p001  := beta(1.0, 1.0);
    p10T1 := beta(1.0, 1.0);
    p10F1 := beta(1.0, 1.0);
    p01T1 := beta(1.0, 1.0);
    p01F1 := beta(1.0, 1.0);

    p00  := (p000, p001);
    p10T := (p10T0, p10T1);
    p10F := (p10F0, p10F1);
    p01T := (p01T0, p01T1);
    p01F := (p01F0, p01F1);

    mixture(np, b, p00, p10T, p10F, p01T, p01F, 0.8032760620117188, false, false, true, true);
    mixture(np, b, p00, p10T, p10F, p01T, p01F, 0.17483338713645935, false, false, true, true);

    return (b, np, p000, p10T0, p10F0, p01T0, p01F0, p001, p10T1, p10F1, p01T1, p01F1);
}
