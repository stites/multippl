exact fn network(
  _p00 : Float,
  _p10T : Float,
  _p10F : Float,
  _p01T : Float,
  _p01F : Float,
  o00 : Bool,
  o10 : Bool,
  o01 : Bool,
  o11 : Bool
) -> Bool {
  let f00 = flip _p00 in                               observe f00 == o00 in
  let f10 = if  f00 then flip _p10T else flip _p10F in observe f10 == o10 in
  let f01 = if !f00 then flip _p01T else flip _p01F in observe f01 == o01 in
  let f11 = f10 || f01 in                              observe f11 == o11 in
  true
}
sample fn mixture(
  np : Float,
  boundary : Float,
  p00  : (Float,Float),
  p10T : (Float,Float),
  p10F : (Float,Float),
  p01T : (Float,Float),
  p01F : (Float,Float),
  n : Float,
  o00 : Bool,
  o10 : Bool,
  o01 : Bool,
  o11 : Bool
) -> Bool {
  observe n from normal(np, 1.0);
  if (n > boundary || n < (0.0 - boundary)) {
    exact(network(p00[0], p10T[0], p10F[0], p01T[0], p01F[0], o00, o10, o01, o11))
  } else {
    exact(network(p00[1], p10T[1], p10F[1], p01T[1], p01F[1], o00, o10, o01, o11))
  }
}

sample {
  b ~ uniform(0.5, 1.5);
  np ~ normal(0.0, 1.0);
  p000  ~ beta(1.0, 1.0);
  p10T0 ~ beta(1.0, 1.0);
  p10F0 ~ beta(1.0, 1.0);
  p01T0 ~ beta(1.0, 1.0);
  p01F0 ~ beta(1.0, 1.0);

  p001  ~ beta(1.0, 1.0);
  p10T1 ~ beta(1.0, 1.0);
  p10F1 ~ beta(1.0, 1.0);
  p01T1 ~ beta(1.0, 1.0);
  p01F1 ~ beta(1.0, 1.0);

  p00 <- (p000, p001);
  p10T <- (p10T0, p10T1);
  p10F <- (p10F0, p10F1);
  p01T <- (p01T0, p01T1);
  p01F <- (p01F0, p01F1);

  mixture(np, b, p00, p10T, p10F, p01T, p01F, pop1, o00_1, o10_1, o01_1, o11_1);
  mixture(np, b, p00, p10T, p10F, p01T, p01F, pop2, o00_2, o10_2, o01_2, o11_2);
  mixture(np, b, p00, p10T, p10F, p01T, p01F, pop3, o00_3, o10_3, o01_3, o11_3);
  mixture(np, b, p00, p10T, p10F, p01T, p01F, pop4, o00_4, o10_4, o01_4, o11_4);
  mixture(np, b, p00, p10T, p10F, p01T, p01F, pop5, o00_5, o10_5, o01_5, o11_5);

  // mixture(np, b, p00, p10T, p10F, p01T, p01F, 0.8032760620117188, false, false, true, true);
  // mixture(np, b, p00, p10T, p10F, p01T, p01F, 0.17483338713645935, false, false, true, true);

  (np, b, p000, p001, p10T0, p10T1, p10F0, p10F1, p01T0, p01T1, p01F0, p01F1)
}
