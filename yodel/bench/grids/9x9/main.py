#!/usr/bin/env python3


import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


from utils import *

truth = [0.33333333333333254, 0.21666666666666645, 0.210833333333332, 0.21054166666665844, 0.21052708333333292, 0.21052635416666668, 0.21052631770833355, 0.210526315885418, 0.21052631579427578, 0.21666666666665482, 0.12146990740740303, 0.11815096703222369, 0.11803415644198549, 0.11737856514262539, 0.11739882614973146, 0.11740232661601054, 0.11740259305639159, 0.11740260954886053, 0.21083333333310514, 0.11974824092428261, 0.11669456592926969, 0.11659223855232179, 0.11616153104719355, 0.11618907883304923, 0.11619145869316332, 0.11619158652554963, 0.11619159248560429, 0.21054166666228064, 0.11971098513527526, 0.11667135897913358, 0.11656975812399512, 0.11614745283787313, 0.11617456516894575, 0.11617693216330384, 0.11617705910789371, 0.11617706556012043, 0.21052708325261404, 0.11970990503971035, 0.1166709697137792, 0.11656936378140216, 0.11614731449511966, 0.11617440818095565, 0.11617677595765537, 0.11617690958403463, 0.116176958838853, 0.21052635280882814, 0.11970985594818781, 0.11667082869095104, 0.11656728076609653, 0.11614725281625293, 0.11617440679810073, 0.11617680341212737, 0.1161772861471341, 0.11618019172463472, 0.21052629877387075, 0.11970965987032814, 0.11666651346188457, 0.11647845970297485, 0.11614464956706078, 0.11617438820284584, 0.11617793047983783, 0.11619558871003725, 0.11638890104455175, 0.21052614765429328, 0.11970663244241231, 0.1165750355804109, 0.11365722406957056, 0.11606202123202507, 0.11617356971340108, 0.11621494587918951, 0.11698373981561741, 0.1298576488670604, 0.21052630738438521, 0.11970980997445844, 0.11666951843823824, 0.11652555560242481, 0.11615579774075163, 0.11621184068431822, 0.11703744039720101, 0.14244558489542067, 1]

def probfn(i, j):
   match (i, j):
       case (0, 0): return [1./3]
       case (_, 0): return [1./4, 1./5]
       case (0, _): return [1./4, 1./5]
       case (1, _): return [1.0 / 6.0, 1.0 / 7.0, 1.0 / 8.0, 1.0 / 9.0]
       case (2, _): return [1.0 / 6.0, 1.0 / 7.0, 1.0 / 8.0, 1.0 / 9.0]
       case (3, _): return [1.0 / 6.0, 1.0 / 7.0, 1.0 / 8.0, 1.0 / 9.0]
       case (4, _): return [1.0 / 6.0, 1.0 / 7.0, 8.0 / 8.0, 1.0 / 9.0]
       case (5, _): return [1.0 / 6.0, 1.0 / 7.0, 8.0 / 8.0, 1.0 / 9.0]
       case (6, _): return [1.0 / 6.0, 1.0 / 7.0, 8.0 / 8.0, 1.0 / 9.0]
       case (7, _): return [1.0 / 6.0, 1.0 / 7.0, 8.0 / 8.0, 1.0 / 9.0]
       case (8, _): return [1.0 / 6.0, 1.0 / 7.0, 8.0 / 8.0, 1.0 / 9.0]
       case _: raise Exception()

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="generate data for simple HMMs")
    parser.add_argument("--num-samples", default=1_000, type=int,)
    parser.add_argument("--num-runs", default=1, type=int,)
    parser.add_argument("--seed", default=0, type=int,)
    args = parser.parse_args()

    model = lambda: mkgrid(9, probfn)
    model = pyro.condition(model, data={"flip88": torch.tensor(1.0)})

    if args.num_runs > 1:
        print("not supported")
        sys.exit(1)
    else:
        # we are benchmarking, expect the same output as yodel
        torch.manual_seed(args.seed)
        np.random.seed(args.seed)
        random.seed(args.seed)
        start = time.time()
        importance = Importance(model, num_samples=args.num_samples)
        marginal = EmpiricalMarginal(importance.run())
        xs = marginal.mean.flatten()
        end = time.time()
        s = end - start
        print(" ".join([f"{x}" for x in xs]))
        print("{:.3f}ms".format(s * 1000))
        #import main; print(sum(compute_l1(xs, main.truth)))
