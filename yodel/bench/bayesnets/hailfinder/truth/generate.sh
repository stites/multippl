#!/usr/bin/env bash
FORCE=0
# was "truth/" for a bit
DICE_PARTIAL=../main.dice-partial
TRUTH_DIR=./
CACHE_DIR=$TRUTH_DIR/cache/
TRUTH_FILE=$TRUTH_DIR/__init__.py
TRUTH_ROOTFILE=$TRUTH_DIR/roots

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case $1 in
  -f) FORCE=1 ;;
  esac
  shift
done
if [[ "$1" == '--' ]]; then shift; fi

dicevar=$(cat $TRUTH_ROOTFILE)

# generate
mkdir -p $CACHE_DIR
for out in $dicevar; do
  if [ $FORCE = 1 ] || [ ! -f "$CACHE_DIR/$out.dice.out" ]; then
    cat $DICE_PARTIAL >"$CACHE_DIR/$out.dice"
    echo "$out" >>"$CACHE_DIR/$out.dice"
    echo "$out" >"$CACHE_DIR/$out.dice.out"
    #dice "$CACHE_DIR/$out.dice" >>"$CACHE_DIR/$out.dice.out"
    dice "$CACHE_DIR/$out.dice" | tee -a "$CACHE_DIR/$out.dice.out"
  fi
done
# aggregate
echo "# DO NOT MODIFY! this is autogenerated from truth.sh!" >"$TRUTH_FILE"
(for out in $dicevar; do
  echo -n "$out = "
  awk 'BEGIN{
     row=""
     i=0
    }
    /^[0-9]+\s+[0-9.]+\s*$/{
      if (i == 0) {
        row = row "[" $2
      } else {
        row = row "," $2
      }
      i ++
    }
    END { print row "]" }' "$CACHE_DIR/$out.dice.out"
done) >>"$TRUTH_FILE"

cat >>"$TRUTH_FILE" <<EOF
from collections import OrderedDict
truthdict = OrderedDict([
EOF

(for out in $dicevar; do
  echo "  (\"$out\", $out)," >>"$TRUTH_FILE"
done)

cat >>"$TRUTH_FILE" <<EOF
])
truth = [sum([i * p for i, p in enumerate(ps)]) for k, ps in truthdict.items()]
if __name__ == "__main__":
    from prior import prior
    def deltal1(ms, truth):
        return list(map(lambda x: abs(x[0] - x[1]), zip(ms, truth)))
    tot = sum(deltal1(truth, prior))
    print('[', ", ".join(['{:0.3f}'.format(i) for i in truth]), ']', " 𝝙", '{:0.3f}'.format(tot))

    print("\nsorted 𝝙:")
    tmpl = "{:<" + str(max([len(k) for k in truthdict.keys()])) + "}"
    sizes = [(d, k) for k, d in zip(truthdict.keys(), deltal1(truth, prior))]
    roll = 0
    for (d, k) in sorted(sizes, key=lambda t: t[0], reverse=True):
        roll += d
        print('{:0.3f}'.format(d), tmpl.format(k), "\t", '({:0.3f}; {:>3}%)'.format(roll, '{:0.0f}'.format(roll / tot * 100)))

EOF

python "$TRUTH_FILE"
