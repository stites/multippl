exact fn state_model (
  _ptA : Float,
  _ptB : Float,
  _ptC : Float,
  _peA : Float,
  _peB : Float,
  _peC : Float,
  _state: Int,
  _o : Int
) -> Int {
    if      _state == 1 then
        let st = discrete(_ptA[0], _ptA[1], _ptA[2])  in
            if      st == 1 then let emit = discrete(_peA[0], _peA[1], _peA[2]) in observe emit == _o in st
            else if st == 2 then let emit = discrete(_peB[0], _peB[1], _peB[2]) in observe emit == _o in st
                            else let emit = discrete(_peC[0], _peC[1], _peC[2]) in observe emit == _o in st
    else if state == 2 then
        let st = discrete(_ptB[0], _ptB[1], _ptB[2]) in
            if      st == 1 then let emit = discrete(_peA[0], _peA[1], _peA[2]) in observe emit == _o in st
            else if st == 2 then let emit = discrete(_peB[0], _peB[1], _peB[2]) in observe emit == _o in st
                            else let emit = discrete(_peC[0], _peC[1], _peC[2]) in observe emit == _o in st
    else
        let st = discrete(_ptC[0], _ptC[1], _ptC[2]) in
            if      st == 1 then let emit = discrete(_peA[0], _peA[1], _peA[2]) in observe emit == _o in st
            else if st == 2 then let emit = discrete(_peB[0], _peB[1], _peB[2]) in observe emit == _o in st
                            else let emit = discrete(_peC[0], _peC[1], _peC[2]) in observe emit == _o in st
}

sample fn sequence_model (
  ptA : [Float],
  ptB : [Float],
  ptC : [Float],
  peA : [Float],
  peB : [Float],
  peC : [Float],
  len: Int,
  obs: [Int]
) -> Bool  {
  ix <- 0;
  s <- 1;
  while ix < len {
    s <- exact(state_model(ptA, ptB, ptC, peA, peB, peC, s, obs[ix]));
    ix <- ix + 1;
    true
  };
  true
}
sample {
  ptA ~ dirichlet(0.5, 0.5, 0.5);
  ptB ~ dirichlet(0.5, 0.5, 0.5);
  ptC ~ dirichlet(0.5, 0.5, 0.5);

  peA ~ dirichlet(0.5, 0.5, 0.5);
  peB ~ dirichlet(0.5, 0.5, 0.5);
  peC ~ dirichlet(0.5, 0.5, 0.5);

  sequence_model(ptA, ptB, ptC, peA, peB, peC, lens1, seqs1);
  sequence_model(ptA, ptB, ptC, peA, peB, peC, lens2, seqs2);
  sequence_model(ptA, ptB, ptC, peA, peB, peC, lens3, seqs3);
  sequence_model(ptA, ptB, ptC, peA, peB, peC, lens4, seqs4);
  sequence_model(ptA, ptB, ptC, peA, peB, peC, lens5, seqs5);

  (ptA, ptB, ptC, peA, peB, peC)
}
