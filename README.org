#+title: MultiPPL: A Probabilistic Multi-language Framework
** examples
* Grammar
* Running the benchmarks
- test a run:
#+begin_example bash
nix build .#docker-bench
(docker load < result)

docker run -v $PWD/dockerdata:/data multippl-bench:latest all --psi-runs 2 --psi-threads 2 --num-threads 4 --num-runs 1)
#+end_example

- Residential memory is highest for psi (17.2G for the ~bayesnet/alarm~ evaluation).
- 10 runs should give a ballpark figure for the 100 run evaluation.

* folder structure
- ~multippl/~ compiler source (see readme for compiler details)
- ~bench/~ python/bash runners to evaluate the multippl benchmark
- ~ttg/~ proc macros for "trees that grow" in rust
- ~tree-sitter-multippl/~ tree sitter grammar and emacs mode (~./multippl-ts-mode.el~)
- ~nix/~ nix support files
